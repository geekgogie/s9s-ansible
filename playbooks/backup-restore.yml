-   name: Restore Backup | Assign existing backup and restore to target node
    hosts: "{{ environ }}"
    connection: local
    gather_facts: false
    vars_files:
        - ../inventory/group_vars/{{ environ }}/{{ environ }}_common
        - ../inventory/group_vars/{{ environ }}/backup/{{ deploy_id|default('') }}

    tasks:
    -   name: Check if cluster exists
        command:
            cmd: s9s cluster --list --long
        register: cluster_list

    -   name: Find clusters of a correct type
        set_fact:
            lines: "{{ lines|default([]) +  [item] }}"
        when: item|trim is search(cluster_type)
        with_items:
        -   "{{ cluster_list.stdout_lines }}"

    -   name: Extract the cluster ID
        set_fact:
            cluster_id: "{{ item.split()[0] }}"
        when: lines is defined and item|trim is search(cluster_name)
        with_items:
        -   "{{ lines }}"

    -   name: Cluster name check
        debug:
             msg: "Cluster name is not found. Playbook shall not push through."
        when: cluster_id is undefined or cluster_id|default(0)|int == 0

    -   name: Check if backup title/id exist
        shell: s9s backup --cluster-id {{ cluster_id }} --list --long|grep -i 'completed'
        register: backup_list

    -   name: Filtering completed backup list by a cluster and backup title provided
        set_fact:
            backup_lines: "{{ backup_lines|default([]) +  [item] }}"
        when: item|trim is search(backup_title)
        with_items:
        -   "{{ backup_list.stdout_lines }}"

    -   name: Extract the backup id
        set_fact:
            backup_id: "{{ item.split()[0] }}"
        when: backup_id is undefined and backup_lines is defined and cluster_id is defined and backup_title is defined and item|trim is search(backup_title)
        with_items:
        -   "{{ backup_lines }}"

    -   name: Check the list of nodes in the cluster
        command:
            cmd: "s9s nodes --list --long --cluster-id={{ cluster_id }} "
        when: cluster_id is defined
        register: node_list
        
    -   name: Check if the target node exist on the assigned cluster
        set_fact:
            node_exist: 1
            valid_play: true
        when: >
             cluster_id|default(0)|int != 0 and
             backup_id|default(0)|int !=0 and
             item[1].split()[4] is defined and item[1].split()[4]|trim == item[0].host|trim and
             item[1].split()[5] is defined and item[1].split()[5]|trim == item[0].port|trim
        with_nested:
        - "{{ node }}"
        - "{{ node_list.stdout_lines }}"

    -   name: Preparing to format the node host and port combination
        set_fact:
            fixed_nodes: "{{fixed_nodes | default('')}}{{ item.host }}:{{ item.port }};"
        loop: "{{ node }}"
        when: valid_play|default(false)|bool == true

    -   name: Validate backup information...
        debug:
             msg: "Backup copy cannot be found. Please verify the backup id or backup title"
        when: backup_id is undefined or backup_title is undefined

    -   name: Validate target node information...
        debug:
             msg: "Backup restore node cannot be located in this cluster. Please verify host backup belongs to the correct cluster {{ cluster_id }}"
        when: (node_exist is undefined and node_exist|int != 1) and cluster_id is defined

    -   debug: >-
            msg="s9s backup --restore --nodes='{{ fixed_nodes }}'
             --backup-id={{ backup_id }}
             --cluster-id={{ cluster_id }} {{ wait_log|d('') }}"
        when: valid_play|default(false)|bool == true

    -   name: Execute s9s CLI to create a cluster
        command: >-
            s9s backup --restore --nodes='{{ fixed_nodes }}'
             --backup-id={{ backup_id }}
             --cluster-id={{ cluster_id }} {{ wait_log|d('') }}
        when: valid_play|default(false)|bool == true