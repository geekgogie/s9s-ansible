-   name: Add Load Balancer | Deploy pgBouncer
    hosts: "{{ environ }}"
    connection: local
    vars_files:
        - ../inventory/group_vars/{{ environ }}/{{ environ }}_common
        - ../inventory/group_vars/{{ environ }}/{{ environ }}_pgbouncer


    tasks:
    -   name: Check if cluster exists
        command:
            cmd: s9s cluster --list --long
        register: cluster_list

    -   name: Find clusters of a correct type
        set_fact:
            lines: "{{ lines|default([]) +  [item] }}"
        when: item|trim is search(cluster_type)
        with_items:
        -   "{{ cluster_list.stdout_lines }}"

    -   name: Extract the cluster ID
        set_fact:
            cluster_id: "{{ item.split()[0] }}"
        when: lines is defined and item|trim is search(cluster_name)
        with_items:
        -   "{{ lines }}"

    -   name: Check the list of nodes in the cluster
        command:
            cmd: "s9s nodes --list --long --cluster-id={{ cluster_id }} "
        when: cluster_id is defined
        register: node_list

    # -   name: Testing dict
    #     ansible.builtin.debug:
    #         msg: "Some variables == {{ item.host }} {{ item.port }}{{ cluster_type }}"
    #     with_items:  "{{ proxy_hosts }}"


    -   name: Check if the loadbalancer has already been deployed on the node
        set_fact:
            loadbalancer: 1
        # debug: >
        #           msg=" Comparing strings =>|{{ item[0].host }},{{ item[0].port }} <==> {{ item[1].split()[4] }},{{ item[1].split()[5] }}"
        # when: >
        #           item[1].split()[4] is defined and item[1].split()[5] is defined
        when: >
             item[1].split()[4] is defined and item[1].split()[4]|trim == item[0].host|trim and
             item[1].split()[5] is defined and item[1].split()[5]|trim == item[0].port|trim
        with_nested:
        - "{{ proxy_hosts }}"
        - "{{ node_list.stdout_lines }}"

    -   name: Verify if pgBouncer nodes should fail as host and port exist already
        ansible.builtin.debug:
             msg: "The host:port combination you have set already exist"
        when: loadbalancer is defined


    # -   name: Testing dict
    #     ansible.builtin.debug:
    #         msg: "Some variables == {{ item.host }} {{ item.port }}{{ cluster_type }}"
    #     with_items:  "{{ proxy_hosts }}"

    -   name: Separate the hosts via comma delimiter to allow multiple host deployments
        set_fact:
            fixed_nodes: "{{fixed_nodes | default('')}}{{prefix}}{{item.host}}:{{item.port}};"
        loop: "{{ proxy_hosts }}"
        when: loadbalancer is undefined

    # -   name: Reveal the variables from previous tasks (csv)
    #     debug:
    #        msg:
    #             - "fixed_nodes=>{{ fixed_nodes }}"

    -   debug: >-
             msg='s9s cluster --add-node --cluster-id={{ cluster_id }}
             --nodes="{{ fixed_nodes }}" --admin-user={{ proxy_admin_user }}
             --admin-password={{ proxy_admin_password }} --os-user={{ os_user }}
             --os-key-file={{ os_key_file }} {{ wait_log|d('') }}'
        when: loadbalancer is undefined

    -   name: Execute s9s CLI to add loadbalancer
        command: >-
            s9s cluster --add-node --cluster-id={{ cluster_id }} --nodes="{{ fixed_nodes }}" 
             --admin-user={{ proxy_admin_user }} --admin-password={{ proxy_admin_password }}
             --os-user={{ os_user }} --os-key-file={{ os_key_file }} {{ wait_log|d('') }}
        when: loadbalancer is undefined