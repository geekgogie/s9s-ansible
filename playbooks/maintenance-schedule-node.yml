-   name: Create maintenance mode
    hosts: 127.0.0.1
    connection: local
    vars:
        os_user: "root"
        os_key_file: "/root/.ssh/id_rsa"
        cluster_name: "mycluster"
        cluster_type: "galera"
        begin_date: "2022-06-30"
        begin_time: "09:00:00"
        end_date: "2022-07-01"
        end_time: "12:20:00"
        nodes: "192.168.10.223"
        reason: "The reason for the maintenance"

    tasks:

    -   name: Check if cluster exists
        command:
            cmd: s9s cluster --list --long
        register: cluster_list

    -   name: Find clusters of a correct type
        set_fact:
            lines: "{{ lines|default([]) +  [item] }}"
        when: item|trim is search(cluster_type)
        with_items:
        -   "{{ cluster_list.stdout_lines }}"

    -   name: Find the cluster ID
        set_fact:
            cluster_id: "{{ item.split()[0] }}"
        when: lines is defined and item|trim is search(cluster_name)
        with_items:
        -   "{{ lines }}"

    -   name: Check the list of nodes in the cluster
        command:
            cmd: "s9s nodes --list --long --cluster-id={{ cluster_id }}"
        when: cluster_id is defined
        register: node_list

    -   name: Check if the node is in the cluster
        set_fact:
            node_in_cluster: 1
        when: item is defined and item is search(nodes)
        with_items:
        -   "{{ node_list.stdout_lines }}" 

    -   name: List all the scheduled maintenances
        command:
            cmd: "s9s maintenance --list --long --print-json"
        register: maintenance_list
        when: node_in_cluster is defined

    -   name: Check if the maintenance has already been scheduled on the node
        set_fact:
            maintenance: 1
        vars:
            query: 'maintenance_records[*].maintenance_periods[*].initiate'
            start_datetime: "{{ begin_date }}T{{ begin_time }}"
        when: maintenance_list is defined and item is search(start_datetime)
        with_items:
        -   "{{ maintenance_list.stdout | from_json | json_query(query) | join(',') }}"

    -   debug:
            msg='s9s maintenance --create --begin="{{ begin_date }} {{ begin_time }}" --end="{{ end_date }} {{ end_time }}" --nodes="{{ nodes }}" --reason="Test maintenance"'
        when: maintenance is undefined

    -   name: Execute s9s CLI to add loadbalancer
        command:
            cmd: 's9s maintenance --create --begin="{{ begin_date }} {{ begin_time }}" --end="{{ end_date }} {{ end_time }}" --nodes="{{ nodes }}" --reason="Test maintenance"'
        when: maintenance is undefined


